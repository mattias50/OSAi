/**
 * Represents the metadata for a monitored file
 */
export interface FileMetadata {
  path: string;
  purpose?: string;
  lastModified: Date;
  size: number;
  hash: string;
  mimeType?: string;
  relationships: FileRelationship[];
  usagePatterns: UsagePattern[];
  performanceMetrics: PerformanceMetrics;
  securityProfile: SecurityProfile;
  contextualData: Map<string, any>;
}

/**
 * Represents a relationship between files
 */
export interface FileRelationship {
  type: RelationshipType;
  targetPath: string;
  strength: number; // 0-1, indicates how strong the relationship is
  description?: string;
  lastVerified: Date;
}

/**
 * Types of relationships between files
 */
export enum RelationshipType {
  IMPORTS = 'imports',
  DEPENDS_ON = 'depends_on',
  REFERENCES = 'references',
  GENERATES = 'generates',
  CONFIGURES = 'configures',
  EXTENDS = 'extends',
  RELATED_TO = 'related_to'
}

/**
 * Represents patterns in how a file is used
 */
export interface UsagePattern {
  type: UsageType;
  frequency: number; // Average times per day
  lastUsed: Date;
  timeOfDay: TimeDistribution;
  associatedProcesses: string[];
  context?: string;
}

/**
 * Types of file usage
 */
export enum UsageType {
  READ = 'read',
  WRITE = 'write',
  EXECUTE = 'execute',
  IMPORT = 'import',
  CONFIG = 'config'
}

/**
 * Distribution of usage across time periods
 */
export interface TimeDistribution {
  morning: number;   // 6am-12pm
  afternoon: number; // 12pm-6pm
  evening: number;   // 6pm-12am
  night: number;     // 12am-6am
}

/**
 * Performance metrics for a file
 */
export interface PerformanceMetrics {
  averageAccessTime: number;
  averageReadTime: number;
  averageWriteTime: number;
  loadImpact: number; // 0-1, impact on system load
  memoryUsage: number;
  optimizationScore: number; // 0-1, how optimized the file is
  lastAnalyzed: Date;
}

/**
 * Security profile for a file
 */
export interface SecurityProfile {
  permissions: string;
  owner: string;
  group: string;
  lastSecurityScan: Date;
  vulnerabilities: Vulnerability[];
  trustScore: number; // 0-1, how trustworthy the file is
  encryptionStatus: EncryptionStatus;
}

/**
 * Represents a security vulnerability
 */
export interface Vulnerability {
  type: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  detectedDate: Date;
  status: 'open' | 'investigating' | 'mitigated' | 'closed';
  mitigation?: string;
}

/**
 * Encryption status of a file
 */
export interface EncryptionStatus {
  isEncrypted: boolean;
  algorithm?: string;
  keyId?: string;
  lastRotated?: Date;
}

/**
 * Represents an alert generated by the monitoring system
 */
export interface Alert {
  id: string;
  type: AlertType;
  severity: 'info' | 'warning' | 'error' | 'critical';
  message: string;
  context: string;
  timestamp: Date;
  relatedFiles: string[];
  suggestedActions: string[];
  status: 'new' | 'acknowledged' | 'resolved' | 'ignored';
}

/**
 * Types of alerts that can be generated
 */
export enum AlertType {
  PERFORMANCE = 'performance',
  SECURITY = 'security',
  USAGE = 'usage',
  RELATIONSHIP = 'relationship',
  OPTIMIZATION = 'optimization',
  ANOMALY = 'anomaly'
}

/**
 * Configuration for the monitoring system
 */
export interface MonitorConfig {
  watchPaths: string[];
  excludePaths: string[];
  updateInterval: number;
  alertThresholds: {
    performance: number;
    security: number;
    anomaly: number;
  };
  relationshipStrengthThreshold: number;
  maxStorageSize: number;
  retentionPeriod: number;
}